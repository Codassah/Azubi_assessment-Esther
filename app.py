# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12uTUA22ASk3PiJmS9qGsVu18bcp3WV3s
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load saved model, scaler, and expected columns
model = joblib.load("logistic_model.pkl")
scaler = joblib.load("scaler.pkl")
model_columns = joblib.load("model_columns.pkl")

st.set_page_config(page_title="Term Deposit Predictor", layout="centered")

st.title("Term Deposit Subscription Predictor")
st.write("Enter the client data to predict if they will subscribe to a term deposit.")

# ----------- Collect Input from User -----------
# Numerical Inputs
age = st.number_input("Age", 18, 100, 30)
duration = st.number_input("Contact Duration (seconds)", 0, 5000, 150)
campaign = st.number_input("Contacts in Current Campaign", 1, 50, 1)
pdays = st.number_input("Days Since Last Contact", -1, 999, 999)
previous = st.number_input("Previous Contacts", 0, 50, 0)

# Categorical Inputs
job = st.selectbox("Job", [
    'admin.', 'blue-collar', 'entrepreneur', 'housemaid', 'management',
    'retired', 'self-employed', 'services', 'student', 'technician', 'unemployed'
])

marital = st.selectbox("Marital Status", ['married', 'single', 'divorced'])

education = st.selectbox("Education", [
    'basic.4y', 'basic.6y', 'basic.9y', 'high.school',
    'illiterate', 'professional.course', 'university.degree'
])

default = st.selectbox("Credit Default", ['no', 'yes'])
housing = st.selectbox("Housing Loan", ['no', 'yes'])
loan = st.selectbox("Personal Loan", ['no', 'yes'])
contact = st.selectbox("Contact Communication", ['cellular', 'telephone'])
month = st.selectbox("Last Contact Month", [
    'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'
])
day_of_week = st.selectbox("Day of Week", ['mon', 'tue', 'wed', 'thu', 'fri'])
poutcome = st.selectbox("Previous Outcome", ['nonexistent', 'failure', 'success'])

# Economic Indicators
emp_var_rate = st.number_input("Employment Variation Rate", -3.5, 1.5, 1.1)
cons_price_idx = st.number_input("Consumer Price Index", 92.0, 95.0, 93.994)
cons_conf_idx = st.number_input("Consumer Confidence Index", -50.0, 0.0, -36.4)
euribor3m = st.number_input("Euribor 3-month rate", 0.0, 6.0, 4.857)
nr_employed = st.number_input("Number of Employees", 4000, 6000, 5191)

# ----------- Construct Input DataFrame -----------
input_data = pd.DataFrame([{
    'age': age,
    'duration': duration,
    'campaign': campaign,
    'pdays': pdays,
    'previous': previous,
    'emp.var.rate': emp_var_rate,
    'cons.price.idx': cons_price_idx,
    'cons.conf.idx': cons_conf_idx,
    'euribor3m': euribor3m,
    'nr.employed': nr_employed,
    'job': job,
    'marital': marital,
    'education': education,
    'default': default,
    'housing': housing,
    'loan': loan,
    'contact': contact,
    'month': month,
    'day_of_week': day_of_week,
    'poutcome': poutcome
}])

# One-hot encode categorical values
input_encoded = pd.get_dummies(input_data)

# Align with model columns
for col in model_columns:
    if col not in input_encoded.columns:
        input_encoded[col] = 0

input_encoded = input_encoded[model_columns]

# Scale numeric features
input_scaled = scaler.transform(input_encoded)

# ----------- Predict -----------

if st.button("Predict Subscription"):
    pred = model.predict(input_scaled)[0]
    proba = model.predict_proba(input_scaled)[0][1]

    if pred == 1:
        st.success(f"Prediction: Client is likely to subscribe (Probability: {proba:.2f})")
    else:
        st.warning(f"Prediction: Client is not likely to subscribe (Probability: {proba:.2f})")